プロダクトバックログ
=====
# プロダクトバックログ（PBL）とは？
プロダクトバックログとは、プロダクトの開発・改善に必要なタスクが優先順位が高い順に並べられた一覧です。

また、プロダクトバックログは、スクラムチームが行う作業が記載された唯一の情報源です。

プロダクトバックログは、スクラムチームやステータクホルダーがプロダクトバックログを共有することで、作業の優先順位や価値を知ることができ、共通のプロダクトゴールを目指すことができるようになります。

また、プロダクトバックログに登録されているタスクをプロダクトバックログアイテム（PBI）と呼びます。

# 管理者は誰か？
product-backlog-master
プロダクトバックログの管理者はプロダクトオーナーです。

ステークホルダーやスクラムチームの要求を取捨選択し、プロダクトバックログアイテムとして登録します。

プロダクトバックログの管理業務は他の人に委託することもできますが、プロダクトバックログアイテムの内容や受け入れ基準、作業の優先順位付けなど、プロダクトバックログにおける最終的な責任を負うのはプロダクトオーナーです。

# いつ作成するのか？
backlog-planning
プロダクトバックログは、スプリントプランニングまでに次のスプリントで必要な分が作成できていればOKです。

事前準備の段階では、大きな粒度でプロダクトバックログアイテムを登録しておき、スプリント0のタイミングでスプリント1で実施するプロダクトバックログアイテムの分割や詳細化を実施します。

基本的に直近の2、3スプリント分のプロダクトバックログが実行可能な状態になっているように準備しましょう！

プロダクトバックログの分割や詳細化はこの記事の後半で解説します。

## プロダクトバックログ作成前の事前準備
プロダクトバックログは、これから開発するプロダクトのゴールや作業の価値や優先順位が示されたものあり、以下の式で表すことができます。

プロダクトバックログ = プロダクトゴール + プロダクトバックログアイテム

また、スクラムチームとステークホルダーでプロダクトに対する共通認識を持つことも大切です。

プロダクトバックログの作成へ向けて、プロダクトゴールとプロダクトバックログアイテムとして登録する内容を事前準備に検討しましょう！

## プロダクトゴールを決める
プロダクトを開発するにあたり「プロダクトゴール」が必要です。

プロダクトゴールを明確にすることでプロダクトの方向性を共有することができ、プロジェクトに関わるメンバーの行動の迷いや無駄な衝突を取り除き、チームの自己管理化やコラボレーションを促進します。

プロジェクトの目的やゴールを整理するプラクティスとして「インセプションデッキ」というものがあります。

プロダクトゴールを明確にすることでプロダクトの方向性を共有することができ、プロジェクトに関わるメンバーの行動の迷いや無駄な衝突を取り除き、チームの自己管理化やコラボレーションを促進します。

プロジェクトの目的やゴールを整理するプラクティスとして「インセプションデッキ」というものがあります。

インセプションデッキは、プロジェクトメンバーがプロジェクトの概要を把握し、目的やゴールに対する共通認識をもつためのドキュメントです。

テンプレートとして用意されている「10個の質問」に答える形で整理していきます。

インセプションデッキの作り方は、以下の記事で詳しく解説しています。

# プロダクトバックログアイテムに登録する内容を整理する
プロダクトを開発するにあたり「どのような顧客（ペルソナ）に、どのようなサービス（価値）を提供するか」を検討する必要があります。

ユーザーに提供する価値を整理するプラクティスとして「ユーザーストーリーマップ」というものがあります。

ユーザーストーリーマップは、プロダクトを利用するユーザー目線で、プロダクトを通してどのような価値が提供されるかを時間軸と優先順位の観点でマッピングしたものです。

ユーザーストーリーマップの作り方は、以下の記事で詳しく解説しています。

# プロダクトバックログの作り方

前提として、スクラムガイドではプロダクトバックログの作り方は定義されていません。

スクラムチームが自分たちで、自分のチームに合った管理方法を検討することが重要だと考えられているからです。

とはいえ、はじめてのスクラム開発ではある程度の型やフォーマットを知りたいと思うはず。
実際私がそうでした（笑）

ここでは、私の周りでよく利用されているものを紹介します。
スプリントを繰り返しながら、ご自身のチームに合わせてカスタマイズしていってください。

# プロダクトバックログが準備完了（Ready）の状態

「プロダクトバックログアイテムを登録する」で説明した5つの内容を満たしたプロダクトバックログは、スプリントで実行できる状態になっており、これをプロダクトバックログがReadyである（準備ができている状態）といいます。

【Readyな状態】
・プロダクトバックログ全体として優先順位が高い順に並べられている
・上位のプロダクトバックログアイテムは具体的かつ達成可能な情報が揃っている
・何を持ってこのプロダクトバックログアイテムが完成するかの基準が明確になっている
・見積りが完了している

ただし、はじめから全てのプロダクトバックログアイテムをReadyにする必要はありません。

全てのプロダクトバックログアイテムまでReadyの状態にすると変化が起こった時に多くのものがムダになります。また、メンテナンス性が悪化し、プロダクトバックログ全体の見通しがしにくい状態となります。
そのため、直近の2,3スプリントで対応する予定のアイテムがReadyであれば十分です。

開発初期のプロダクトバックログは上記の図のように、優先順位が高いアイテムほど詳細化されており、優先順位が低いアイテムは粗い状態となります。

プロダクトバックログアイテムをReadyにしておくことで、プロダクトオーナーやステークホルダーにとっては予測制度が向上します。

また、Readyの状態はスクラムチームごとに異なります。チームの成熟度によって、自分たちのチームではどこまで準備すればReadyの状態と言えるのかを検討しましょう！

# プロダクトバックログのリファインメント

スクラムイベントの「リファインメント」を通して、プロダクトバックログのリファインメントを実施しましょう！

具体的には以下のようなことを実施します。
【リファイメントでやること】
* 新たなプロダクトバックログアイテムの追加や見積り
* 不要なプロダクトバックログアイテムの削除
* 既存のプロダクトバックログアイテムの再見積り
* プロダクトバックログアイテムの優先順位の最新化
* 直近のスプリントで対応予定のReadyな状態になっていないプロダクトバックログアイテムの詳細化
* 大きすぎるプロダクトバックログアイテムの分割


また、プロダクトバックログをリファインメントをする際は、以下の「INVEST」を意識してみましょう。
* Independent（独立している）
* Negotiable（交渉可能）
* Valuable（価値がある）
* Estimable（見積り可能）
* Size right / Small（適正な大きさ）
* Testable（テスト可能）

スクラムイベントのリファインメントは、以下の記事で解説していますのでご確認ください。

## プロダクトバックログアイテムの粒度
プロダクトバックログアイテムの粒度に悩む方も多いと思います。

例えReadyな状態になっていたとしても、プロダクトバックログアイテムが大きすぎると以下のようなことがおこります。
* スプリントで完了しない
* ベロシティが不安定

インクリメントの量が安定しないため、今後の見通しを立てにくくなってしまいます。

そのため、プロダクトバックログの粒度としては、1日、2日程度で終わるサイズ感を目安とし、大きすぎるアイテムは分割するようにしましょう。

## プロダクトバックログアイテムの分割
では、大きすぎるプロダクトバックログアイテムをどのように分割すれば良いでしょうか？

以下の観点で分割を検討してみてください。
* ペルソナ（利用者）によって分割
* 業務フローのステップごとに分割
* must要件とwant要件で分割
* ”など”、”かつ”、”または”という言葉が出てきたら分割
* 機能とユーザービリティで分割（動くPBIと綺麗にするPBIで分ける）
* CRUD（Create, Read, Update, Delete）で分割
* OSやクライアントの端末などプラットフォームごとに分割
* 受け入れ基準の条件で分割
* spike（技術検証）と機能実装で分割
* テストシナリオやケース観点で分割

# 失敗例・アンチパターン
より良いプロダクトバックログへ向けて、まずはご自身のチームのプロダクトバックログ以下のアンチパターンにいくつ当てはまっているか確認しましょう！

理想を追い続けるのではなく、良くないところを直していくスタイルです（笑）
* プロダクトバックログアイテムに優先順位がついていない
* プロダクトに対する優先順位ではなく、作業としての優先度で並んでいる
* フォーマットで記載しているだけで、実際には何の理由も説明されていない
* 第三者が読んでわかる文章になっていない
* ワクワクしない、退屈なプロダクトバックログになっている
* ユーザーストーリーではなく、タスクが登録されている
* 画面単位でプロダクトバックログアイテムが作成されている
* 受け入れ条件が記載されていない
* プロダクトバックログが見える化されていない
* 更新内容がチームメンバーに共有されていない
* 定期的なリファイメントが実施されていない
* スプリントレビューのフィードバックが１つも登録されていない
* 開発者からの要求やレトロでのアクションアイテムが1つも登録されていない
* プロダクトオーナーではなく、スクラムマスターがプロダクトバックログを管理している
* 将来の準備や技術的な調査など、spikeが1つ登録されていない
* 1つのプロダクトバックログアイテムがスプリント中に完了しない粒度になっている
* プロダクトバックログアイテムが細かすぎて価値が理解しにくい
* 決まったフォーマットで作成されており、チーム内で議論が発生しない

# より良いプロダクトバックログにするためのノウハウ
* まずはプロダクトゴールから考える（インセプションデッキ）
* みんなでプロダクトバックログアイテムの候補を検討する（ユーザーストーリーマップ）
* プロダクトバックログを前にたくさん会話する（共通理解、議論誘発のため）
* なるべく早く仮説を検証できるようにMVPを特定する
* 自分のチームのニーズに合わせて、記載内容をカスタマイズする
* Just in Timeのプロダクトバックログ作りを心がける（はじめから全て作成しようとしない）
* 小まめにプロダクトバックログを手入れする（我が子のように愛情を注ぐ）

# 「プロダクトバックログ」まとめ
[ポイント]
* プロダクトバックログは、プロダクトの作成・改善に必要なタスクが優先度順に一覧で並べられたもの。
* PBLを作成する前にプロダクトゴールや初回リリースで提供する価値（MVP）を整理しておく必要がある。
* PBIは「実施理由」「参考資料/補足情報」「受け入れ基準」を共有し、PO – 開発者で共通認識が持てるようにする。
* PBLは、直近のスプリントを開始できるだけのPBIの作成が出来ていればOK。
* 直近のPBIが「分割&詳細化」「受け入れ基準の明確化」「優先度順に並んでいる」「見積りが完了している」状態がPBLが「Ready」の状態である。

