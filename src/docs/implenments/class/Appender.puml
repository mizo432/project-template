@startuml


interface Appender{
---
  + doAppend(event: E):void
}

class UnsynchronizedAppenderBase{
---
  + doAppend(event: E):void
  # append(event: E):void
  + addFilter(Filter<E> filter):void
  + getFilterChainDecision(Filter<E> filter):FilterReply
}
Appender <|.. UnsynchronizedAppenderBase

class OutputStreamAppenderBase{
---
  + setOutputString(OutputStream): void
  + setEncoder(Encoder<E>): void
}
UnsynchronizedAppenderBase <|-- OutputStreamAppenderBase

interface Encoder{
---
  + init(OutputStream):void
  + doEncode(event):void
  + close():void
}

class Filter{
---
  + decide(event E): FilterReply
}

UnsynchronizedAppenderBase <|-- DBAppenderBase

abstract class  DBAppenderBase{
---
  append(E eventObject): void
  getConnectionSource() :ConnectionSource
	setConnectionSource(ConnectionSource connectionSource): void
	start(): void
	stop(): void
}
DBAppenderBase <|-- DBAppender

class DBAppender{
  # static GET_GENERATED_KEYS_METHOD: Method
  # 	insertExceptionSQL : String
  # 	insertPropertiesSQL : String
  # insertSQL : String
---
  # getGeneratedKeysMethod():Method
  # getInsertSQL(): String
  # insertProperties(Map<String,String> mergedMap, Connection connection, long eventId): void
  # insertThrowable(IThrowableProxy tp, Connection connection, long eventId) :void
  # secondarySubAppend(ILoggingEvent event, Connection connection, long eventId) void
	setDbNameResolver(DBNameResolver dbNameResolver): void
	start(): void
  # subAppend(ILoggingEvent event, Connection connection, PreparedStatement insertStatement):void

}

@enduml