plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.3'
    id 'net.researchgate.release' version '3.0.2'
    id 'java'
    id 'idea'
    id "com.github.ben-manes.versions" version '0.48.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id "com.github.spotbugs" version "5.1.3"
    id 'jacoco'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
    id 'org.flywaydb.flyway' version '9.22.1'

}

apply plugin: 'idea'
apply plugin: 'com.github.spotbugs'
apply plugin: 'jacoco'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'pmd'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

springBoot {
    buildInfo()
}
bootJar {
    enabled = true
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
jar {
    enabled = false
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
idea {
    module {
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}

repositories {
    mavenCentral()
}

pmd {
    ignoreFailures = true
    consoleOutput = true

    ruleSetFiles = files(file("$rootProject.projectDir/src/config/pmd/pmdRules.xml"))
    ruleSets = []
    pmdTest.enabled = false
    toolVersion = '6.21.0'
}
dependencies {
    implementation project(':web-validation')
    implementation project(":common-message")
    implementation project(":common-exception")
    implementation project(":common-precondition")
    implementation project(':server-business')
    implementation project(':web-common')
    implementation project(':common-primitive')
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    implementation group: 'com.google.guava', name: 'guava', version: "${guavaVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.thymeleaf.extras:thymeleaf-extras-springsecurity6")
    implementation "org.flywaydb:flyway-core:9.22.2"
    implementation "org.springframework.session:spring-session-data-redis:${springSessionDataRedisVersion}"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.22'
    runtimeOnly "org.postgresql:postgresql:${postgresVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation "de.codecentric:spring-boot-admin-starter-client:${springBootAdminVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-actuator', version: "3.1.4"
    implementation group: 'de.huxhorn.sulky', name: 'de.huxhorn.sulky.ulid', version: '8.3.0'
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: "2.0.3"

    implementation group: 'redis.clients', name: 'jedis', version: "5.0.1"
    compileOnly group: 'org.jetbrains', name: 'annotations', version: "24.0.1"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation group: 'org.seasar.doma.boot', name: 'doma-spring-boot-starter', version: "${domaStarterVersion}"
    runtimeOnly "org.seasar.doma:doma-core:${domaVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation("org.aspectj:aspectjrt:1.9.20.1")
    implementation 'org.aspectj:aspectjweaver:1.9.20.1'
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

}

flyway {
    url = 'jdbc:postgresql://localhost:5432/sample'
    user = 'user'
    password = 'password'
    locations = ['classpath:db/migration']
}
spotbugs {
    toolVersion.set('4.7.3')
    excludeFilter.set(file("$rootProject.projectDir/src/config/spotbugs/excludeFilter.xml"))
    ignoreFailures.set(true)
    maxHeapSize.set('2048m')
    spotbugsTest.enabled = false
    showStackTraces = false
}
spotbugsMain {
    reports {
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main.xml")
        }
    }
}

compileJava {
    options.compilerArgs = ['-Xlint:unchecked',
                            '-Xlint:deprecation',
                            '-parameters'
    ]
    options.encoding = 'UTF-8'

}
compileTestJava {
    options.compilerArgs = ['-proc:none']
    options.encoding = 'UTF-8'

}

test {
    // 失敗しても後続の処理を継続させる
    ignoreFailures = true
    useJUnitPlatform {
        includeTags 'SMALL'
        excludeTags('MEDIUM', 'LARGE')
    }
    reports {
        junitXml.required.set(true)
    }
}
tasks.register("testMedium", Test) {
    ignoreFailures = false
    maxHeapSize("3g")
    useJUnitPlatform {
        includeTags('MEDIUM')
        excludeTags('SMALL', 'LARGE')
    }
    reports {
        junitXml.required.set(true)
    }
}

tasks.register("testLarge", Test) {
    ignoreFailures = false
    useJUnitPlatform {
        includeTags('LARGE')
        excludeTags('SMALL', 'MEDIUM')
    }
    reports {
        junitXml.required.set(true)
    }

}
tasks.register("testReport", TestReport) {
    reportOn subprojects.tasks.test.binResultsDir
    fileTree(dir: it, exclude: ['**/*Test.class', '**/**test/*.class'])

}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.from(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ['**/*Test.class', '**/**test/*.class'])
                }))
    }
}
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE11'].any { it -> version.toUpperCase().contains(it) }
    def unstableKeyword = ['PREVIEW', 'ALPHA', 'M', 'BETA', 'RC', 'RC-1'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return ((!stableKeyword) && (!(version ==~ regex))) || (unstableKeyword)
} as Object

dependencyUpdates {
    // checkForGradleUpdate = true
    // reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

}



