plugins {
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'java'
    id 'idea'
    id "com.github.ben-manes.versions" version '0.42.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id "com.github.spotbugs" version "5.0.8"
    id 'jacoco'
    id 'java-library'

}

apply plugin: 'idea'
apply plugin: 'com.github.spotbugs'
apply plugin: 'jacoco'
apply plugin: 'com.github.ben-manes.versions'


springBoot {
    buildInfo()
}
bootJar {
    enabled = true
}
jar {
    enabled = false
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
idea {
    module {
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
//    maven { url 'https://repo.spring.io/milestone' }
//    maven { url 'https://repo.spring.io/snapshot' }
//    maven { url 'https://repo.spring.io/libs-release' }
}

dependencies {
    implementation group: 'de.codecentric', name: 'spring-boot-admin-server', version: '3.0.0'
    implementation group: 'de.codecentric', name: 'spring-boot-admin-server-ui', version: '3.0.0'
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation group: 'org.springframework.boot', name: 'spring-boot-actuator', version: '3.0.0'
    implementation 'de.codecentric:spring-boot-admin-starter-client:3.0.0'

    compileOnly group: 'org.jetbrains', name: 'annotations', version: '23.0.0'


}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

}

test {
    // 失敗しても後続の処理を継続させる
    ignoreFailures = true
    useJUnitPlatform {
        includeTags 'SMALL'
        excludeTags('MEDIUM', 'LARGE')
    }
    reports {
        junitXml.required = true
    }
}

task testMedium(type: Test) {
    ignoreFailures = false
    maxHeapSize("3g")
    useJUnitPlatform {
        includeTags('MEDIUM')
        excludeTags('SMALL', 'LARGE')
    }
    reports {
        junitXml.required = true
    }
}
task testLarge(type: Test) {
    ignoreFailures = false
    useJUnitPlatform {
        includeTags('LARGE')
        excludeTags('SMALL', 'MEDIUM')
    }
    reports {
        junitXml.required = true
    }
}
task testReport(type: TestReport) {
    reportOn subprojects.tasks.test.binResultsDir
    fileTree(dir: it, exclude: ['**/*Test.class', '**/**test/*.class'])
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.from(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ['**/*Test.class', '**/**test/*.class'])
                }))
    }
}
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE11'].any { it -> version.toUpperCase().contains(it) }
    def unstableKeyword = ['PREVIEW', 'ALPHA', 'M', 'BETA', 'RC', 'RC-1'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return ((!stableKeyword) && (!(version ==~ regex))) || (unstableKeyword)
} as Object

dependencyUpdates {
    // checkForGradleUpdate = true
    // reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

}



