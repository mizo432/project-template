plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'net.researchgate.release' version '2.8.1'
    id 'java'
    id 'idea'
    id "com.github.ben-manes.versions" version '0.42.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id "com.github.spotbugs" version "5.0.8"
    id 'jacoco'
}

apply plugin: 'idea'
apply plugin: 'com.github.spotbugs'
apply plugin: 'jacoco'
apply plugin: 'com.github.ben-manes.versions'

springBoot {
    buildInfo()
}
bootJar {
    enabled = true
}
jar {
    enabled = false
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
idea {
    module {
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation group: 'com.tngtech.archunit', name: 'archunit-junit5', version: '0.23.1'
    implementation group: 'de.codecentric', name: 'spring-boot-admin-starter-client', version: '2.7.4'
    implementation group: 'org.springframework.boot', name: 'spring-boot-actuator', version: '2.7.5'
    implementation group: 'de.huxhorn.sulky', name: 'de.huxhorn.sulky.ulid', version: '8.3.0'


    compileOnly group: 'org.jetbrains', name: 'annotations', version: '23.0.0'

    // modelmapper
    implementation 'org.modelmapper:modelmapper:3.1.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

}

spotbugs {
    toolVersion.set('4.4.2')
    excludeFilter.set(file("$rootProject.projectDir/src/config/spotbugs/excludeFilter.xml"))
    ignoreFailures.set(true)
    maxHeapSize.set('2048m')
    spotbugsTest.enabled = false
    showStackTraces = false
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

}

test {
    // 失敗しても後続の処理を継続させる
    ignoreFailures = true
    useJUnitPlatform {
        includeTags 'SMALL'
        excludeTags('MEDIUM', 'LARGE')
    }
    reports {
        junitXml.required = true
    }
}

task testMedium(type: Test) {
    ignoreFailures = false
    maxHeapSize("3g")
    useJUnitPlatform {
        includeTags('MEDIUM')
        excludeTags('SMALL', 'LARGE')
    }
    reports {
        junitXml.required = true
    }
}
task testLarge(type: Test) {
    ignoreFailures = false
    useJUnitPlatform {
        includeTags('LARGE')
        excludeTags('SMALL', 'MEDIUM')
    }
    reports {
        junitXml.required = true
    }
}
task testReport(type: TestReport) {
    reportOn subprojects.tasks.test.binResultsDir
    fileTree(dir: it, exclude: ['**/*Test.class', '**/**test/*.class'])
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.from(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ['**/*Test.class', '**/**test/*.class'])
                }))
    }
}

dependencyUpdates {
    // checkForGradleUpdate = true
    // reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE11'].any { it -> version.toUpperCase().contains(it) }
    def unstableKeyword = ['PREVIEW', 'ALPHA', 'M', 'BETA', 'RC', 'RC-1'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return ((!stableKeyword) && (!(version ==~ regex))) || (unstableKeyword)
} as Object

